classdef Model
    %UNTITLED3 Summary of this class goes here
    %   Detailed explanation goes here

    properties
        min_sf
        node_list
        elem_list
        K  % stiffness matrix
        D  % displacement matrix
        F  % forces matrix
        unwn_forces_vec % logical vector of the locations of unknown forces
        F_m  % modified forces matrix, without the unknowns
        K_m  % modified stiffness matrix, without the unknowns
        D_m  % modified displacement matrix, without the unknowns
    end

    methods
        function obj = Model(node_list,elem_list)
            % Construct an instance of this class
            %  Initializes the class
            obj.node_list = node_list;
            obj.elem_list = elem_list;

            %  find the smallest sf
            sf_list = [];
            for i = elem_list
                sf_list = cat(1,sf_list, i.sf);
            end
            obj.min_sf = min(sf_list);  % smallest sf of the list


            % turn the stiffnesses of the elements into multiples of the
            %  smallest sf
            for i = 1:length(obj.elem_list)
                obj.elem_list(i).k = obj.elem_list(i).k * (obj.elem_list(i).sf /obj.min_sf);
            end

            % create an empty stiffness matrix for the elements
            %  using the node list
            obj.K = zeros(length(obj.node_list),length(obj.node_list));

            % add the sf of each elements using the node ids as the
            %  coordinates in the matrix
            for elem = obj.elem_list
                for i = 1:length(elem.nodes)
                    node_i = elem.nodes(i);
                    for j = 1:length(elem.nodes)
                        node_j = elem.nodes(j);
                        obj.K(node_i.ID, node_j.ID) = obj.K(node_i.ID, node_j.ID) + elem.k(i,j);
                    end
                end
            end
            disp('K:')
            disp(obj.K)



            % create stiffness matrix using the physical properties of the
            %  element materials
            obj.K = obj.K*obj.min_sf;
            disp('K:')
            disp(obj.K)


            % create displacement matrix
            obj.D = zeros(length(obj.node_list),1);
            for node_i = obj.node_list
                obj.D(node_i.ID) = node_i.displacement;
            end
            disp("D:")
            disp(obj.D)

            % create forces matrix
            obj.F = zeros(length(obj.node_list),1);
            for node_i = obj.node_list
                obj.F(node_i.ID) = node_i.force;
            end
            disp('F:')
            disp(obj.F)

            %   solve the matrixes to calculate displacement

            %find locaiutons of unknown forces
            obj.unwn_forces_vec = isnan(obj.F);
            disp('unknown_forces_vec:')
            disp(obj.unwn_forces_vec)


            % remove lines and columns with unknown forces
            obj.F_m = obj.F(~obj.unwn_forces_vec);
            disp('F_m:')
            disp(obj.F_m)

            obj.K_m = obj.K(~obj.unwn_forces_vec, ~obj.unwn_forces_vec);
            disp('K_m:')
            disp(obj.K_m)

            % Solve equation to calculate displacements
            obj.D_m = obj.K_m'*obj.F_m;
            disp('D_m:')
            disp(obj.D_m)

            obj.D_m = linsolve(obj.K_m, obj.F_m);
            disp('D_m:')
            disp(obj.D_m)
            

            % update the displacement matrix with the new calculated values
            I = find(isnan(obj.D));
            obj.D(I) = obj.D_m;
            disp('new D:')
            disp(obj.D)


            % calculate froces from displacement
            obj.F = obj.K * obj.D;
            disp("new F:")
            disp(obj.F)
 

            % update displacement values on the nodes
            for i = 1:length(obj.node_list)
                obj.node_list(i).displacement = obj.D(i);
            end




            % calculate stress and strain in teh elements based off node displacement
            % /!\ uses the nodes at the end of the elem, ignoring the
            % middle one if it is there
            for i = 1:length(obj.elem_list)

                l = [-1/obj.elem_list(i).L 1/obj.elem_list(i).L];
                d = [obj.node_list(obj.elem_list(i).nodes(1).ID).displacement
                    obj.node_list(obj.elem_list(i).nodes(end).ID).displacement];

                obj.elem_list(i).strain = l*d;
                

                obj.elem_list(i).stress = obj.elem_list(i).E * obj.elem_list(i).strain;
                disp(" - Element " + string(obj.elem_list(i).ID)+":")
                disp("strain: " + string(obj.elem_list(i).strain))
                disp("stress: "+ string(obj.elem_list(i).stress)+ " MPa")

            end









        end

        function displacement_at_x = find_displacement_at_x(obj, elem, x)
            %displacement_at_x:  Find the displacement at any point a x mm
            %from the end of the element
            %   Detailed explanation goes here

            if length(elem.nodes) == 2
                shape_function = [1-x/elem.L x/elem.L];
                displacement_array = [obj.node_list(elem.nodes(1).ID).displacement 
                    obj.node_list(elem.nodes(2).ID).displacement];


                

            end
            if length(obj.nodes) == 3

            end
               


            displacement_at_x = obj.min_sf + x;
        end

        function outputArg = method1(obj,inputArg)
            %METHOD1 Summary of this method goes here
            %   Detailed explanation goes here
            outputArg = obj.min_sf + inputArg;
        end
    end
end